{"version":3,"sources":["components/ContactItem/ContactItem.module.css","components/Container/Container.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Container/Container.js","components/Filter/Filter.js","components/App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","data","payload","id","uuidv4","name","number","deleteContact","changeFilter","getItems","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","contact","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","console","log","handleInputChange","event","currentTarget","value","reset","className","css","form","onSubmit","preventDefault","find","toast","error","formInputLabel","formInput","type","onChange","pattern","title","required","formInputBtn","ContactItem","onDelete","contactItemName","contactItemNumber","deleteBtn","onClick","ContactList","map","contactItem","onDeleteContact","Container","children","container","Filter","filterInput","target","App","itemsReducer","createReducer","filterReducer","_","contactsReducer","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.d7082998.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItemName\":\"ContactItem_contactItemName__1EqLd\",\"contactItemNumber\":\"ContactItem_contactItemNumber__3GpK9\",\"deleteBtn\":\"ContactItem_deleteBtn__2-QRd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2fF4o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__3W6o2\"};","import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contacts/add', data => ({\n  payload: {\n    id: uuidv4(),\n    name: data.name,\n    number: data.number,\n  },\n}));\n\nexport const deleteContact = createAction('contacts/delete');\nexport const changeFilter = createAction('contacts/filter');\n\n// Без использования React Toolkit\n\n// import { v4 as uuidv4 } from 'uuid';\n\n// import { ADD_CONTACT, DELETE_CONTACT, FILTER } from './contacts-types';\n\n// export const addContact = data => ({\n//   type: ADD_CONTACT,\n//   payload: {\n//     id: uuidv4(),\n//     name: data.name,\n//     number: data.number,\n//   },\n// });\n\n// export const deleteContact = contactId => ({\n//   type: DELETE_CONTACT,\n//   payload: contactId,\n// });\n\n// export const changeFilter = value => ({\n//   type: FILTER,\n//   payload: value,\n// });\n\n// export { addContact, deleteContact, changeFilter };\n","export const getItems = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n    const items = getItems(state);\r\n    const filter = getFilter(state);\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return items.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n};","import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport toast from 'react-hot-toast';\n\nimport { addContact } from 'redux/contacts/contacts-actions';\nimport { getItems } from 'redux/contacts/contacts-selectors';\n\nimport css from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  // useSelector вместо mapStateToProps\n  const contacts = useSelector(getItems);\n\n  const dispatch = useDispatch();\n\n  console.log(name);\n\n  const handleInputChange = event => {\n    console.log(number);\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const doubleContact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (doubleContact) {\n      toast.error(`${name} is alredy in contacts.`);\n      return;\n    };\n\n    dispatch(addContact({ name, number }));\n    // onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.formInputLabel}>\n        Name\n        <input\n          className={css.formInput}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={css.formInputLabel}>\n        Number\n        <input\n          className={css.formInput}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button className={css.formInputBtn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: data => dispatch(addContact(data)),\n// });\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport css from './ContactItem.module.css';\n\nconst ContactItem = ({ name, number, onDelete }) => (\n  <>\n    <p>\n      <span className={css.contactItemName}>{name}:</span>\n      <span className={css.contactItemNumber}>{number}</span>\n      <button type=\"button\" className={css.deleteBtn} onClick={onDelete}>\n        Delete\n      </button>\n    </p>\n  </>\n);\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\n// import { connect } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-actions';\nimport { getVisibleContacts } from 'redux/contacts/contacts-selectors';\n\nimport ContactItem from 'components/ContactItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(deleteContact(id));\n\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={css.contactItem}>\n          <ContactItem\n            name={name}\n            number={number}\n            onDelete={() => onDeleteContact(id)}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n// const getVisibleContacts = (allTodos, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n//   return allTodos.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getVisibleContacts(items, filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: id => dispatch(deleteContact(id)),\n// });\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string,\n//     }),\n//   ).isRequired,\n//   onDeleteContact: PropTypes.func,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\nexport default ContactList;","import React from 'react';\nimport css from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <div className={css.container}>{children}</div>\n);\n\nexport default Container;\n","import React from 'react';\nimport css from './Filter.module.css';\n// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { changeFilter } from 'redux/contacts/contacts-actions';\nimport { getFilter } from 'redux/contacts/contacts-selectors';\n\nconst Filter = () => {\n\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      Find contacts by name\n      <input\n        className={css.filterInput}\n        type=\"text\"\n        value={filter}\n        onChange={(event) => dispatch(changeFilter(event.target.value))}\n      />\n    </label>\n  )\n};\n\n// const mapStateToProps = state => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: event => dispatch(changeFilter(event.target.value)),\n// });\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\nexport default Filter;\n","import React from 'react';\r\nimport { Toaster } from 'react-hot-toast';\r\n\r\nimport ContactForm from './ContactForm';\r\nimport ContactList from './ContactList';\r\nimport Container from './Container';\r\nimport Filter from './Filter';\r\n\r\nexport default function App() {\r\n    // const [contacts, setContacts] = useState([\r\n    //     {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n    //     {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n    //     {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n    //     {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n    // ]);\r\n\r\n    // const [filter, setFilter] = useState('');\r\n\r\n    // useEffect(() => {\r\n    //     const contacts = localStorage.getItem('contacts');\r\n    //     const parsedContacts = JSON.parse(contacts);\r\n    //     if (parsedContacts) {\r\n    //         console.log(parsedContacts);\r\n    //         setContacts(parsedContacts);\r\n    //     };\r\n    // }, []);\r\n\r\n    // useEffect(() => {\r\n    //     localStorage.setItem('contacts', JSON.stringify(contacts));\r\n    // }, [contacts]);\r\n\r\n    // const formSubmitHandler = (data) => {\r\n    //     // Добавление контакта\r\n    //     const contact = {\r\n    //         id: uuidv4(),\r\n    //         name: data.name,\r\n    //         number: data.number,\r\n    //     };\r\n\r\n    //     // Проверка на дублирование имени\r\n    //     const doubleContact = contacts.find(contact => contact.name.toLowerCase() === data.name.toLowerCase());\r\n        \r\n    //     if (doubleContact) {\r\n    //         toast.error(`${data.name} is alredy in contacts.`);\r\n    //         return;\r\n    //     };\r\n\r\n    //     setContacts([contact, ...contacts]);\r\n    // };\r\n\r\n    // const changeFilter = event => {\r\n    //     setFilter(event.currentTarget.value);\r\n    // };\r\n\r\n    // const getVisibleContacts = () => {\r\n    //     const normalizedFilter = filter.toLowerCase();\r\n    //     return contacts.filter(contact =>\r\n    //         contact.name.toLowerCase().includes(normalizedFilter),\r\n    //     );\r\n    // };\r\n\r\n    // const deleteContact = (contactId) => {\r\n    //     setContacts(contacts.filter(contact => contact.id !== contactId));\r\n    // };\r\n\r\n    return (\r\n        <Container>\r\n            <Toaster/>\r\n            <h1>Phonebook</h1>\r\n            <ContactForm></ContactForm>\r\n            {/* <ContactForm onSubmit={formSubmitHandler}></ContactForm> */}\r\n            <h2>Contacts</h2>\r\n            <Filter></Filter>\r\n            <ContactList></ContactList>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n// export default function App() {\r\n//     const [contacts, setContacts] = useState([\r\n//         {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n//         {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n//         {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n//         {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n//     ]);\r\n\r\n//     const [filter, setFilter] = useState('');\r\n\r\n//     useEffect(() => {\r\n//         const contacts = localStorage.getItem('contacts');\r\n//         const parsedContacts = JSON.parse(contacts);\r\n//         if (parsedContacts) {\r\n//             console.log(parsedContacts);\r\n//             setContacts(parsedContacts);\r\n//         };\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         localStorage.setItem('contacts', JSON.stringify(contacts));\r\n//     }, [contacts]);\r\n\r\n//     const formSubmitHandler = (data) => {\r\n//         // Добавление контакта\r\n//         const contact = {\r\n//             id: uuidv4(),\r\n//             name: data.name,\r\n//             number: data.number,\r\n//         };\r\n\r\n//         // Проверка на дублирование имени\r\n//         const doubleContact = contacts.find(contact => contact.name.toLowerCase() === data.name.toLowerCase());\r\n        \r\n//         if (doubleContact) {\r\n//             toast.error(`${data.name} is alredy in contacts.`);\r\n//             return;\r\n//         };\r\n\r\n//         setContacts([contact, ...contacts]);\r\n//     };\r\n\r\n//     const changeFilter = event => {\r\n//         setFilter(event.currentTarget.value);\r\n//     };\r\n\r\n//     const getVisibleContacts = () => {\r\n//         const normalizedFilter = filter.toLowerCase();\r\n//         return contacts.filter(contact =>\r\n//             contact.name.toLowerCase().includes(normalizedFilter),\r\n//         );\r\n//     };\r\n\r\n//     const deleteContact = (contactId) => {\r\n//         setContacts(contacts.filter(contact => contact.id !== contactId));\r\n//     };\r\n\r\n//     return (\r\n//         <Container>\r\n//             <Toaster/>\r\n//             <h1>Phonebook</h1>\r\n//             <ContactForm onSubmit={formSubmitHandler}></ContactForm>\r\n//             <h2>Contacts</h2>\r\n//             <Filter value={filter} onChange={changeFilter}></Filter>\r\n//             <ContactList \r\n//                 contacts={getVisibleContacts()}\r\n//                 onDeleteContact={deleteContact}\r\n//             ></ContactList>\r\n//         </Container>\r\n//     )\r\n// }\r\n\r\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, changeFilter } from './contacts-actions';\n\nconst itemsInitialState = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nconst itemsReducer = createReducer(itemsInitialState, {\n  [addContact]: (state, { payload }) => [payload, ...state],\n  [deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport const contactsReducer = combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n\n// Без использования React Toolkit\n\n// import { combineReducers } from 'redux';\n// import { ADD_CONTACT, DELETE_CONTACT, FILTER } from './contacts-types';\n// // import {actions} from './contacts-actions';\n\n// const itemsInitialState = [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ];\n\n// const itemsReducer = (state = itemsInitialState, { type, payload }) => {\n//   switch (type) {\n//     case ADD_CONTACT:\n//       return [payload, ...state];\n\n//     case DELETE_CONTACT:\n//       return state.filter(({ id }) => id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filterReducer = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export const contactsReducer = combineReducers({\n//   items: itemsReducer,\n//   filter: filterReducer,\n// });\n","import { configureStore } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport { contactsReducer } from './contacts/contacts-reducer';\n\n// const persistConfig = {\n//   key: 'root',\n//   storage,\n// }\n\nconst middleware = getDefaultMiddleware => [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n\n// Без использования React Toolkit\n// import { createStore, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import { contactsReducer } from './contacts/contacts-reducer';\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport { store, persistor } from 'redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// Без использования React Toolkit\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import { Provider } from 'react-redux';\n\n// import App from './components/App';\n// import store from 'redux/store';\n// // import reportWebVitals from './reportWebVitals';\n// import 'modern-normalize/modern-normalize.css';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <Provider store={store}>\n//       <App />\n//     </Provider>\n//   </React.StrictMode>,\n//   document.getElementById('root'),\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__24t-l\",\"formInput\":\"ContactForm_formInput__3WIlS\",\"formInputLabel\":\"ContactForm_formInputLabel__1ytpb\",\"formInputBtn\":\"ContactForm_formInputBtn__1YwYb\"};"],"sourceRoot":""}